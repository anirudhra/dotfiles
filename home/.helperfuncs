#!/bin/bash
# Helper functions for dotfiles

# Guard variable to ensure sourcing only once
#if [[ -v SOURCED_HELPERFUNCS ]]; then
if [ -n "${SOURCED_HELPERFUNCS}" ]; then
  return 0 # Exit the script if already sourced
fi

# Set the guard variable
SOURCED_HELPERFUNCS=1

# Logging functions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

debuglog() {
  echo -e "${CYAN}[DEBUG: $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log() {
  echo -e "${GREEN}[LOG:$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
  echo -e "${RED}[ERROR: $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" >&2
  exit 1
}

warn() {
  echo -e "${YELLOW}[WARNING: $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

debuglog "Helper functions sourced"

# Detect the operating system type
# Returns:
#   - "macos" for macOS,
#   - "debian" for Debian-based systems
#   - "fedora" for Fedora-based systems
#   - "linux" for other Linux distributions
#   - "arch" for Arch-based systems
#   - "gentoo" for Gentoo-based systems
#   - "slackware" for Slackware-based systems
#   - "unknown" for other systems
detect_os_type() {
  uname_os="$(uname -s)"

  if [[ "${uname_os}" == "Darwin" ]]; then
    echo "macos"
  elif [[ "${uname_os}" == "Linux" ]]; then
    # If it's Linux, check for specific distribution by sourcing /etc/os-release
    if [[ -f /etc/os-release ]]; then
      . /etc/os-release
      case "$ID" in
      debian | ubuntu | linuxmint | pop | elementary | kali | raspbian | zorin)
        echo "debian"
        ;;
      fedora | rhel | centos | rocky | almalinux | ol | oracle)
        echo "fedora"
        ;;
      arch | manjaro | endeavouros | artix)
        echo "arch"
        ;;
      gentoo | funtoo | calculate)
        echo "gentoo"
        ;;
      slackware | salix)
        echo "slackware"
        ;;
      *)
        # Fallback to ID_LIKE for derivative distributions
        if [[ "$ID_LIKE" == *debian* ]]; then
          echo "debian"
        elif [[ "$ID_LIKE" == *rhel* || "$ID_LIKE" == *fedora* ]]; then
          echo "fedora"
        elif [[ "$ID_LIKE" == *arch* ]]; then
          echo "arch"
        elif [[ "$ID_LIKE" == *gentoo* ]]; then
          echo "gentoo"
        elif [[ "$ID_LIKE" == *slackware* ]]; then
          echo "slackware"
        else
          # It's a Linux system, but we don't recognize the specific distribution
          echo "linux"
        fi
        ;;
      esac
    else
      # /etc/os-release not found, but we know it's Linux
      echo "linux"
    fi
  else
    # Neither macOS nor Linux
    echo "unknown"
  fi
}

# Detect the architecture type
# Returns:
#   - "x86_64" for x86_64
#   - "aarch64" for aarch64
#   - "arm64" for arm64
#   - "armv7l" for armv7l
#   - "armv7h" for armv7h
#   - "unknown" for other architectures
detect_arch_type() {
  #debuglog "Detecting architecture type"
  if [[ "$(uname -m)" == "x86_64" ]]; then
    #debuglog "Detected x86_64 architecture"
    echo "x86_64" # combination of echo and return used to return strings in functions
  elif [[ "$(uname -m)" == "aarch64" ]]; then
    #debuglog "Detected aarch64 architecture"
    echo "aarch64" # combination of echo and return used to return strings in functions
  elif [[ "$(uname -m)" == "arm64" ]]; then
    #debuglog "Detected arm64 architecture"
    echo "aarch64" # combination of echo and return used to return strings in functions
  elif [[ "$(uname -m)" == "armv7l" ]]; then
    #debuglog "Detected armv7l architecture"
    echo "armv7l" # combination of echo and return used to return strings in functions
  elif [[ "$(uname -m)" == "armv7h" ]]; then
    #debuglog "Detected armv7h architecture"
    echo "armv7h" # combination of echo and return used to return strings in functions
  else
    #debuglog "Unknown architecture"
    echo "unknown" # combination of echo and return used to return strings in functions
  fi
}

# Detect the shell type
# Returns:
#   - "bash" for bash
#   - "zsh" for zsh
#   - "sh" for sh
#   - "fish" for fish
#   - "tcsh" for tcsh
#   - "ash" for ash
#   - "unknown" for other shells
detect_shell_type() {
  #debuglog "Detecting shell type"
  if [[ "$SHELL" == *"/bash" ]]; then
    #debuglog "Detected bash shell"
    echo "bash" # combination of echo and return used to return strings in functions
  elif [[ "$SHELL" == *"/zsh" ]]; then
    #debuglog "Detected zsh shell"
    echo "zsh" # combination of echo and return used to return strings in functions
  elif [[ "$SHELL" == *"/sh" ]]; then
    #debuglog "Detected sh shell"
    echo "sh"
  elif [[ "$SHELL" == *"/fish" ]]; then
    #debuglog "Detected fish shell"
    echo "fish"
  elif [[ "$SHELL" == *"/tcsh" ]]; then
    #debuglog "Detected tcsh shell"
    echo "tcsh"
  elif [[ "$SHELL" == *"/ash" ]]; then
    #debuglog "Detected ash shell"
    echo "ash"
  else
    #debuglog "Unknown shell"
    echo "unknown" # combination of echo and return used to return strings in functions
  fi
}

# Detect the Machine type
# Returns:
#   - "pveserver" for PVE Server
#   - "pveguest" for PVE Guest
#   - "client" for Client
detect_machine_type() {
  #debuglog "Detecting machine type"
  # $HOSTNAME only works for bash shells, use more portable way
  #if [[ "${HOSTNAME}" == "ifc6410" ]] || [[ "${HOSTNAME}" == "IFC6410" ]]; then
  host_name=$(hostname)
  if [[ "${host_name}" == "ifc6410" ]] || [[ "${host_name}" == "IFC6410" ]]; then
    #debuglog "Detected SBC"
    echo "sbc" # combination of echo and return used to return strings in functions
  elif [[ "${host_name}" == "mx4300" ]] || [[ "${host_name}" == "MX4300" ]] || [[ "${host_name}" == "RT-AX82U" ]] || [[ "${host_name}" == "rt-ax82u" ]]; then
    #debuglog "Detected Router"
    echo "router" # router linux
  elif [ -f /proc/1/environ ]; then
    if [ -x "$(command -v pveversion)" ]; then
      #debuglog "Detected PVE server"
      echo "pveserver" # combination of echo and return used to return strings in functions
    elif [ -x "$(command -v systemd-detect-virt)" ]; then
      #debuglog "Detected PVE guest"
      if [[ $(/usr/bin/systemd-detect-virt) == "none" ]]; then
        echo "client" # combination of echo and return used to return strings in functions
      else
        echo "pveguest" # combination of echo and return used to return strings in functions
      fi
    else
      echo "unknown linux" # combination of echo and return used to return strings in functions
    fi
  else
    #debuglog "Detected client"
    echo "unknown" # combination of echo and return used to return strings in functions
  fi
}
