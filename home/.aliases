## (c) Anirudh Acharya 2024
## useful aliases

# For OS detection
#detect_os() {
#    if [[ "$OSTYPE" == "darwin"* ]]; then
#        # do what's needed for macos
#    elif [[ -f /etc/os-release ]]; then
#    # can also use if [[ "$OSTYPE" == "linux=gnu"* ]]; then
#        source /etc/os-release
#        if [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]]; then
#            #do what's needed for ubuntu/debian
#             #if [ -x "$(command -v pveversion)" ]; then
#                 # for pve server only
#             #fi 
#        elif [[ $ID == "fedora" ]] || [[ $ID == "centos" ]] || [[ $ID == "rhel" ]]; then
#            #do what's needed for fedora/rhel/centos
#        else
#            #echo "Unsupported Linux distribution 
#        fi
#    else
#        echo "Unsupported UNIX/Linux OS"
#    fi
#}

## ls aliases
## Colorize the ls output ##
alias ls='ls --color=auto -FG'
#export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
alias ll='ls -la --color | less -R'
## Show hidden files ##
alias ll.='ls -l -d -FG --color=auto .* | less'
alias ls.='ls -d -FG --color=auto .*'

alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable
alias lr='ls -tRFh'   #sorted by date,recursive,show type,human readable
alias lt='ls -ltFh'   #long list,sorted by date,show type,human readable
alias ldot='ls -ld .*'
alias lS='ls -1FSsh'
alias lart='ls -1Fcart'
alias lrt='ls -1Fcrt'
alias lsr='ls -lARFh' #Recursive list of files and directories
alias lsn='ls -1'     #A column contains name of files and directories

#quick access to zshrc and bashrc files
alias zshrc='vim ${HOME}/.zshrc'
alias bashrc='vim ${HOME}/.bashrc'

## a quick way to get out of current directory ##
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias grepc='grep --color=always'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
alias hgrep="fc -El 0 | grep"
alias greph='history | grep'

#directory related aliases
alias mkdir='mkdir -pv'
alias md='mkdir -pv'
alias rd='rmdir'

# "dos" aliases
alias cls='clear'
alias c='clear'
alias dir='ls'

#stow aliases
if [  -x "$(command -v stow)" ]; then
  alias unstow='cd ${HOME}/dotfiles/home && stow --verbose=2 --target=${HOME} --delete . && cd -'
  alias restow='cd ${HOME}/dotfiles/home && stow --verbose=1 --target=${HOME} --stow --adopt . && cd -'
else
  alias stow='cp -f ${HOME}/dotfiles/home/.aliases ${HOME}/.aliases'
  alias restow='cp -f ${HOME}/.aliases ${HOME}/.aliases.bak && cp -f ${HOME}/dotfiles/home/.aliases ${HOME}/.aliases'
fi

alias path='echo -e ${PATH//:/\\n}'
alias now='date +"%T"'
alias nowtime='now'
alias nowdate='date +"%d-%m-%Y"'
alias a='alias'

# find aliases
alias fdir='find . -type d -name'
alias count='find . -type f | wc -l'
alias ffile='find . -type f -name'

## disk space clean output ##
alias dud='du -d 1 -h'
alias df='df -P -h'
alias du='du -ch'
alias duf='duf -hide special'
alias dirsize='du -sh'
alias diskuse="echo 'Device          Size  Used  Free  Mount Point' && df -h --output=source,size,used,avail,target | grep dev/root | sort"

# sort, unset etc.
alias help='man'
alias sortnr='sort -n -r'
alias unexport='unset'

#file aliases, always interactive mode
#alias rm='rm -i'
#alias cp='cp -i'
#alias mv='mv -i'

## get top process eating memory
alias psmem='ps aux | sort -nr -k 4'
alias psmem10='ps aux | sort -nr -k 4 | head -10'
alias free='free -h'

## get top process eating cpu ##
alias pscpu='ps aux | sort -nr -k 3'
alias pscpu10='ps aux | sort -nr -k 3 | head -10'

alias listps='ps aux | grep -v "ps aux" | grep -Ev "\[.+\]" | grep -v grep'
alias proc='ps aux | grep -i '

# become root #
alias root='sudo -i'
#alias su='sudo -i'
alias please='sudo $( history -p !! )'
 
# editor aliases
if [ -x "$(command -v nvim)" ]; then #if neovim is  found
  alias vi='nvim'
  alias vim='nvim'
  alias vis='nvim "+set si"'
  alias sudovi='sudo nvim'
  alias edit="nvim"
elif [ -x "$(command -v vim)" ]; then
  alias vi='vim'
  alias vis='vim "+set si"'
  alias sudovi='sudo vim'
  alias edit="vim"
else
  #failsafe, in almost every OS
  alias vi='nano'
  alias vim='nano'
  alias vis='nvim "+set si"'
  alias sudovi='sudo nano'
  alias edit="nano"
fi

alias v='vim'

# pager and readme aliases
alias pager="${PAGER}"
alias readme="find . -maxdepth 1 -iname \"readme*\" -exec less -R {} \;"

# Tree
if [ ! -x "$(which tree 2>/dev/null)" ]
then
  alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
fi

# Get rid of .DS_Store files recursiveloy in current directory tree
alias dsclean='find . -type f -name .DS_Store -delete && find . -type f -name ._.DS_Store -delete'
alias dotclean='find . -name ._\* -delete'

# Create m3u playlist from file listing in current directory recursively
alias createplaylist="find . -type f -iname \"*.mp3\" -or -iname \"*.flac\" -or -iname \"*.alac\" -or -iname \"*.m4a\" > Playlist.m3u"

############### OS Assumptions #################
# Debian/Ubuntu: PVE Server and PVE LXCs and VMs
# Fedora: Laptop
# macOS: Desktop 
################################################

# OS specific macros, all other generalized linux/distro agnostic is later
# Debian/Ubuntu and derivatives only below
if [ -x "$(command -v apt-get)" ]; then
    # add condition for debian/derivatives specific command here
    alias fullclean='sudo apt clean && sudo apt autoclean && sudo apt autoremove'
    alias fullupdate='sudo apt update && sudo apt dist-upgrade'
    alias showinstalled="sudo apt list --installed | less"
    alias showkernel="echo Active Kernel && uname -a && echo Installed Kernels && dpkg --list | grep -i kernel-"

    #detect if running on PVE server
    # PVE go shortcuts
    if [ -x "$(command -v pveversion)" ]; then 
      alias gomedia='cd /mnt/sata-ssd/ssd-media/media'
      alias godata='cd /mnt/sata-ssd/ssd-data'
      alias godocker='cd /mnt/sata-ssd/ssd-data/dockerapps'
      alias goscripts='cd /mnt/sata-ssd/pve_server/pve_lxc_scripts/maintenance'
    else
      # LXC/VM go shortcuts
      alias gomedia='cd /mnt/pve-sata-ssd/ssd-media/media'
      alias godata='cd /mnt/pve-sata-ssd/ssd-data'
      alias godocker='cd /mnt/pve-sata-ssd/ssd-data/dockerapps && cd $HOSTNAME'
      alias upgrade="fullupdate && update && fullclean && dockerupdateall"

      # following to be run on LXC/VM guests only, not server
      alias dockerup='docker compose up -d'
      alias dockerdown='docker compose down'
      alias dockerrestart='docker compose down && docker compose up -d'
      alias dockerupdate='docker compose down && docker compose pull && docker compose up -d --remove-orphans && docker image prune -f && docker system prune --volumes'
      alias dockerbackup='sudo tar -zcvf ~/dockerapps.tar.gz /mnt/pve-sata-ssd/ssd-data/dockerapps'
      alias dockerclean='docker system prune --volumes'
      #alias dockerbackup='sudo tar -zcvf ~/dockerapps.tar.gz /opt/dockerapps'
    fi
#Fedora Linux only below
elif [ -x "$(command -v dnf)" ]; then 
    # add condition for fedora specific command here
    alias fullclean='sudo dnf clean all && sudo dnf autoremove && sudo flatpak uninstall --unused'
    alias fullupdate='sudo dnf update --refresh && sudo dnf upgrade -y && sudo flatpak upgrade -y'
    alias fullupgrade='sudo dnf update --refresh && sudo flatpak upgrade -y && sudo dnf distro-sync'
    alias fwupdate='sudo fwupdmgr refresh --force && sudo fwupdmgr get-updates && sudo fwupdmgr update'
    alias checkfw='sudo fwupdmgr get-devices'
    alias showkernel='echo Active Kernel && sudo uname -a && echo && echo Installed Kernels && sudo rpm -q kernel-core'
    alias showinstalled="rpm --query --all --queryformat '%{NAME}.%{ARCH}: %{SUMMARY}\n' | less"
#rpm --query --all --queryformat '%{NAME}.%{ARCH}: %{SUMMARY}\n'macOS specific only below
elif [ -x "$(command -v diskutil)" ]; then 
    # add condition for macos specific commmand here - diskutil not available on linux, only macos
    alias brew_update='brew update && brew upgrade && brew cleanup && brew doctor && brew update && brew cleanup'
    
    # all other macos aliases/macros
    alias showkext="kextstat | grep -E"
    alias gvim='vimr'
        
    #finder hidden files
    alias showhidden='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder /System/Library/CoreServices/Finder.app'
    alias hidehidden='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder /System/Library/CoreServices/Finder.app'
    alias finder='open'
    alias shuf='gshuf'
    
    # Desktop Programs
    alias preview="open -a '$PREVIEW'"
    alias xcode="open -a '/Applications/XCode.app'"
    alias edge="open -a '/Applications/Microsoft\ Edge.app'"
    alias filemerge="open -a '/Developer/Applications/Utilities/FileMerge.app'"
    alias safari="open -a safari"
    alias firefox="open -a firefox"
    alias chrome="open -a google\ chrome"
    alias textedit='open -a TextEdit'

    #monitor cpu clock
    alias cpufreq="sudo powermetrics | grep \"CPU Average frequency as fraction of nominal\""

    # jupyterlab aliases
    alias ipy="jupyter lab ~/code/github/jupyternb"
    alias gooc='cd ~/code/OpenCore'
fi

#git
alias gitpush="git pull && git add * && git commit -a && git push"
alias gitpullall="find . -type d -name .git -exec sh -c \"cd \"{}\"/../ && pwd && git pull\" \;"
alias gitpushall="find . -type d -name .git -exec sh -c \"cd \"{}\"/../ && pwd && git pull && git add * && git commit -a && git push\" \;"

# goto aliases
alias godot='cd ${HOME}/dotfiles'

# Enable syntax-highlighting in less/cat
# Note: needs source-highlight and highlight brew packages for these to work
#export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
#export LESS=" -R "
#alias less='less -m -N -g -i -J --underline-special --SILENT'
alias lessc='less -R'
alias more='less'
#alias cat='less'
#use column command for a table. syntax: column -t -s "separator like , :" <filename>
alias table='column -t -s'

#dumps directory contents to file, usage dir2file <filename>
alias dir2file="find \"$PWD\" -iname \"*\" >" 

#use "refresh" followed by any command you want to constantly refresh on screen, Ctrl+C to quit
alias refresh='watch --interval=3'

# network related
# Stop after sending count ECHO_REQUEST packets #
alias ping='ping -c 5'
# Do not wait interval 1 second, go fast #
alias fastping='ping -c 100 -s.2'
alias ports='netstat -tulanp'
alias wget='wget -c'

# change ownership to nobdoy:nogroup, primarily for shares 
alias nobodyown='chown -R nobody:nogroup *'

# non-PVE server commands
if [ ! -x "$(command -v pveversion)" ]; then # detect if running on PVE
  
  # other goto aliases
  alias gocode='cd ${HOME}/code'
  alias gogit='cd ${HOME}/code/github'

  # iperf3, uses daemon on pve persever
  alias iperfdown='iperf3 -Rc 10.100.100.50'
  alias iperfup='iperf3 -c 10.100.100.50'

  # ping aliases
  alias pingserver='ping 10.100.100.50'

  # by default always open a tmux session for PVE server, use sshserver for non-tmux version
  alias sshpve='ssh -o MACs=hmac-sha2-256 root@10.100.100.50 -t "tmux attach || tmux new"'
  alias sshserver='ssh -o MACs=hmac-sha2-256 root@10.100.100.50' #non-tmux version
fi

#router
alias sshrouter='ssh admin@10.100.100.1 -p 12372 -t "tmux attach || tmux new"'
alias pingrouter='ping 10.100.100.1'

#ssh to LXC/VMs, always run tmux sessions for suspend-resume
alias sshblanka='ssh -o MACs=hmac-sha2-256 root@10.100.100.65 -t "tmux attach || tmux new"'
alias sshha='ssh -o MACs=hmac-sha2-256 root@10.100.100.70 -t "tmux attach || tmux new"'
alias sshjf='ssh -o MACs=hmac-sha2-256 root@10.100.100.80 -t "tmux attach || tmux new"'
alias sshsagat='ssh -o MACs=hmac-sha2-256 root@10.100.100.75 -t "tmux attach || tmux new"'
alias sshvega='ssh -o MACs=hmac-sha2-256 root@10.100.100.60 -t "tmux attach || tmux new"'
alias sshventoy='ssh -o MACs=hmac-sha2-256 root@10.100.100.51 -t "tmux attach || tmux new"'
alias sshwg='ssh -o MACs=hmac-sha2-256 root@10.100.100.55 -t "tmux attach || tmux new"'
alias sshimm='ssh -o MACs=hmac-sha2-256 root@10.100.100.95 -t "tmux attach || tmux new"'
alias sshubuntu='ssh -o MACs=hmac-sha2-256 root@10.100.100.85 -t "tmux attach || tmux new"'
alias sshubuntuuser='ssh -o MACs=hmac-sha2-256 nonroot@10.100.100.85 -t "tmux attach || tmux new"'
# alias sshpaperless=''
# alias sshnc=''
# alias sshkodi=''
# alias sshfrigate=''

# IFC6410 SBC
alias sshsbc='ssh root@10.100.100.63 -t "tmux attach || tmux new"' #wifi
alias sshsbceth='ssh root@10.100.100.64 -t "tmux attach || tmux new"' #ethernet

# generic tmux ssh alias, usage: sshtmux <login@host>
# alias sshtmux='ssh -t "tmux attach || tmux new"'

# generic linux-only, distro agnostic; not applicable to macOS
if [ ! -x "$(command -v diskutil)" ]; then
    # linux services
    alias booterrors='sudo journalctl  -b 0 -p 3'
    alias sysinfo='sudo inxi -Fzx'
    alias updateboot='sudo update-grub && sudo update-initramfs -u -k all'
    alias reservice='sudo systemctl daemon-reload'
    alias serialnum='sudo dmidecode -t system'
    alias ncdulocal='ncdu --exclude "/mnt/nfs" --exclude-kernfs -e'
    
    alias fm='nautilus . &'
    alias gvim='vim'
fi
######## functions ######################

mkcd()
{
    case $# in
    1)
        mkdir -p "$1"
        cd "$1"
        ;;
    *)
        echo "USAGE : mkcd <directory>"
        ;;
    esac
}

#intended to be run on PVE guests only
movemovie()
{
    if [ ! -x "$(command -v pveversion)" ]; then #detect if running on PVE server
      case $# in
      1)
          chmod 777 "$1"
          chown -R nobody:nogroup "$1"
          mv "$1" /mnt/pve-sata-ssd/ssd-media/media/video/MyMovies
          ;;
      *)
          echo "USAGE : movemovie <movie_dir>"
          ;;
      esac
    fi
}

#intended to be run on PVE guests only
dockerupdateall()
{
    if [ ! -x "$(command -v pveversion)" ]; then #detect if running on PVE server
      cd /mnt/pve-sata-ssd/ssd-data/dockerapps || exit
      cd "$(hostname)" || exit
      find . -maxdepth 1 -type d \( ! -name . \) -not -path '*disabled*' -exec bash -c "cd '{}' && pwd && docker compose down && docker compose pull && docker compose up -d --remove-orphans" \;
      docker image prune -a -f
      docker system prune --volumes -f
    fi
}

#create timelapse from set of images in a directory
timelapse()
{
   #10fps should be good, but adjust as needed
   echo "Place all images in current directory sorted in ascending order by file name"
   ls -1tr | grep -v files.txt > files.txt
   mencoder -nosound -noskip -oac copy -ovc copy -o output.avi -mf fps=10 'mf://@files.txt'
   #ffmpeg -i output.avi -vf scale=1920:1440,crop=1920:1080 output-final.avi
   # adjust res and codec manually
   ffmpeg -i output.avi output-final.avi
   echo "Done. You may delete original output.avi and files.txt"
}

#intended to be run on linux only
cleanlocales()
{
    if [ ! -x "$(command -v diskutil)" ]; then #detect running on non-macos
      sudo find /usr/share/locale/* -maxdepth 0 -type d -not -iname "en*" -exec rm -r {} \;
    fi
}

